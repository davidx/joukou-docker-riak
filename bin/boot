#!/bin/bash
# Copyright 2014 Joukou Ltd
# Copyright 2014, OpDemand LLC
# Copyright 2014 Kivra AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This script starts Basho Riak 2.x in a Docker container after some basic
# initial configuration.
#
# Riak will listen on the eth0 interface which is the interface through which a
# container speaks to the bridge.
#
# To set the Erlang cookie for Riak clustering override RIAK_COOKIE

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# retrieve IPv4 address asigned to the given interface
function get_iface_v4_addr {
  local iface="${1}"
  ip -o -4 addr list "${iface}" 2> /dev/null | \
      awk '{print $4}' | \
      cut -d/ -f1
}

# update riak.conf with nodename and listening address
function riak_update_conf {
  cat /etc/riak/riak.conf.envsubst | envsubst \
    > /etc/riak/riak.conf
}

# set riak data and log directory permissions
function riak_set_directory_permissions {
  chown -R riak:riak /var/lib/riak /var/log/riak
  chmod 755 /var/lib/riak /var/log/riak
}

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
  local riak_pid=$(cat /run/riak.pid)
  kill -TERM $riak_pid
  wait $riak_pid 2>/dev/null
  exit 0
}
trap on_exit INT TERM

function riak_main {
  export RIAK_ADDR=$(get_iface_v4_addr "eth0")
  export RIAK_NODENAME="riak@${RIAK_ADDR}"

  riak_update_conf
  riak_set_directory_permissions

  # spawn riak in the background
  riak start

  # obtain the riak process identifier
  riak getpid > /run/riak.pid

  # while the riak port is listening, everything is OK
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".8098\" && \$1 ~ \"tcp.?\"") ]] ; do
    sleep 10
  done

  # if the loop exits, something went wrong
  exit 1
}

riak_main
